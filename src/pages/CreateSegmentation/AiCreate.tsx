"use client"

import { useContext, useEffect, useState } from "react"
import { ChatInterface } from "@/components/blocks/AIChat/chat-interface"
import { PreviewPanel } from "@/components/blocks/AIChat/preview-panel"
import type { ChatMessage, HistoryResult, ResponseData } from "@/types/aichat"
import { generateSQLPreview } from "@/utils/segmentFunctionHelper"
import { useSegmentData } from "@/context/SegmentDataContext"
import { useAiChatContext } from "@/context/AiChatContext"
import AuthContext from "@/context/AuthContext"
import { toast } from "sonner"
import { axiosPrivate } from "@/API/axios"

export default function AiCreate() {
    // State for chat history
    // const [chatHistory, setChatHistory] = useState<ChatMessage[]>([
    //     {
    //         user: "",
    //         ai: "Xin chÃ o! TÃ´i lÃ  trá»£ lÃ½ AI cá»§a báº¡n. TÃ´i cÃ³ thá»ƒ giÃºp báº¡n táº¡o phÃ¢n khÃºc khÃ¡ch hÃ ng dá»±a trÃªn dá»¯ liá»‡u cá»§a báº¡n. Báº¡n muá»‘n phÃ¢n khÃºc khÃ¡ch hÃ ng nhÆ° tháº¿ nÃ o?",
    //     },
    // ])

    const [activeTab, setActiveTab] = useState("sql")
    const [isLoading, setIsLoading] = useState(false)
    const { token } = useContext(AuthContext);
    const { selectedDataset, setSqlQuery, setConditionGroups, setConditions, setRootOperator, setResponseData, responseData, setInputMessage, chatHistory, setChatHistory, setHistoryResult } = useAiChatContext()

    const handleSendMessage = async (message: string) => {
        if (!message.trim()) return;

        const newMessage: ChatMessage = { user: message };
        setChatHistory(prev => [...prev, newMessage]);

        setIsLoading(true);

        try {
            console.log('check input message: ', message);
            const res = await axiosPrivate.post('/segment/nlp/chatbot', { nlpQuery: message }, {
                headers: { Authorization: `Bearer ${token}` }
            });

            //console.log("check res: ", res.data);
            if (res.status === 200 && res.data?.success) {
                const dataRes: ResponseData = res.data;
                console.log('check dataRes: ', dataRes);
                // Update response data
                setResponseData(dataRes);

                const filter = dataRes?.data?.filter_criteria;
                if (filter) {
                    const aiResponse = `ðŸŽ¯ TÃ´i Ä‘Ã£ táº¡o phÃ¢n khÃºc dá»±a trÃªn tiÃªu chÃ­ báº¡n cung cáº¥p:\n${dataRes?.data?.explanation?.key_conditions.map(item => `â€¢ ${item}`).join("\n")}\n\nðŸ“Š Báº¡n cÃ³ thá»ƒ xem káº¿t quáº£ trong tab "Xem trÆ°á»›c" cho yÃªu cáº§u: "${message}"`;

                    setChatHistory((prev) => {
                        const updated = [...prev]
                        updated[updated.length - 1] = { ...updated[updated.length - 1], ai: aiResponse }
                        return updated
                    })
                    setHistoryResult((prev) => {
                        const createVersion = [...prev];
                        const newEntry: HistoryResult = {
                            version: `version ${createVersion.length + 1}`,
                            result: dataRes as ResponseData,
                        };
                        return [...createVersion, newEntry];
                    });
                    toast.success('AI response success');
                }
            } else {
                const aiResponse = `Xin lá»—i chÃºng tÃ´i ${res.data?.error && res.data.error.charAt(0).toUpperCase() + res.data.error.slice(1)}`
                setChatHistory((prev) => {
                    const updated = [...prev]
                    updated[updated.length - 1] = { ...updated[updated.length - 1], ai: aiResponse }
                    return updated
                })
            }
        } catch (err: any) {
            const message = err?.message || 'KhÃ´ng xÃ¡c Ä‘á»‹nh Ä‘Æ°á»£c lá»—i';
            toast.error(`CÃ³ lá»—i xáº£y ra vá»›i AI: ${message}`);
        } finally {
            setIsLoading(false);
            setInputMessage("")
        }
    };

    return (
        <div className="flex flex-col md:flex-row h-[calc(100vh-2rem)] gap-2 bg-background from-slate-50 to-slate-100 dark:from-slate-900 dark:to-slate-950">
            <ChatInterface chatHistory={chatHistory} isLoading={isLoading} onSendMessage={handleSendMessage} />
            <PreviewPanel
                activeTab={activeTab}
                setActiveTab={setActiveTab}
                isLoading={isLoading}
                responseData={responseData}
            />
        </div>
    )
}
